 public ruleBase RegrasPokemon {
 
 		rule AndarAleatoriamente {
		    declarations
		        AgenteMapa am;
		    conditions
		    	am.getMapaElemento().existeElementoProximo(am.getAgente().getPosicao()) == false;
		    actions
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
 
 		 rule UsarPokebola {
		    declarations
		      AgenteMapa am;
		    conditions
		    	am.getAgente().getQuantidadePokebolas() > 0;
		    	am.getMapaElemento().existeElementoPosAtual(am.getAgente().getPosicao()) >= 4;
		    actions
		      	System.out.println("O agente capturou um pokemon.");
		      	am.getAgente().setQuantidadePokebolas(am.getAgente().getQuantidadePokebolas() - 1);
		      	am.getAgente().setCustoAcao(-5);
		      	am.getAgente().setDecisao(2);
		      	am.getMapaElemento.atualizaMapa();
		      	modified(am);
		  }
		  
		  rule DecisaoIrPraCelula {
		    declarations
		      AgenteMapa am;
		    conditions
		    	am.getMapaElemento().temElementoProximo(am.getAgente().getPosicao()) == true;
		    actions
		      	System.out.println("O agente andou uma celula.");
		      	am.getAgente().setCustoAcao(-1);
		      	am.getAgente().setDecisao(am.getAgente().IR_CELULA);
		      	am.getMapaElemento.atualizaMapa();
		      	modified(am);
		  }
		  
		 rule IrPraCelulaACima {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getDecisao() == am.getAgente().IR_CELULA;
		    	am.getMapaElemento().getCelulaDirecao() == am.getMapaElemento().CIMA;
		    	am.getAgente().getOrientacao() == 1;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() - 1].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() - 1].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para cima");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX(), posicaoAtual.getY() - 1);
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule IrPraCelulaBaixo {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getDecisao() == am.getAgente().IR_CELULA;
		    	am.getMapaElemento().getCelulaDirecao() == am.getMapaElemento().BAIXO;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() + 1].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() + 1].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para baixo");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX(), posicaoAtual.getY() + 1);
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule IrParaCelulaDireita {
		   declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getDecisao() == am.getAgente().IR_CELULA;
		    	am.getMapaElemento().getCelulaDirecao() == am.getMapaElemento().DIREITA;
		    	am.getAgente().getOrientacao() == 3;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX() + 1][am.getAgente().getPosicao().getY()].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX() + 1][am.getAgente().getPosicao().getY()].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para direita");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX() + 1, posicaoAtual.getY());
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule IrPraCelulaEsquerda {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getDecisao() == am.getAgente().IR_CELULA;
		    	am.getMapaElemento().getCelulaDirecao() == am.getMapaElemento().ESQUERDA;
		    	am.getAgente().getOrientacao() == 4;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX() - 1][am.getAgente().getPosicao().getY()].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX() - 1][am.getAgente().getPosicao().getY()].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para esquerda");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX() - 1, posicaoAtual.getY());
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule DecisaoBatalhar {
		    declarations
		      AgenteMapa am;
		    conditions
		    	am.getAgente().getDecisao() == am.getAgente().BATALHAR;
		    	am.getMapaElemento().existemElementosCima(am.getAgente().getPosicao()) == 3;
		    	am.getMapaElemento().existemElementosCima(am.getAgente().getPosicao()) < 4;
		    	am.getMapaElemento().existemElementosBaixo(am.getAgente().getPosicao()) < 4;
		    	am.getMapaElemento().existemElementosDireita(am.getAgente().getPosicao()) < 4;
		    	am.getMapaElemento().existemElementosEsquerda(am.getAgente().getPosicao()) < 4;
		    	(am.getMapaElemento().existemElementosCima(am.getAgente().getPosicao()) != 1 &&
		    	am.getMapaElemento().existemElementosBaixo(am.getAgente().getPosicao()) != 1 &&
		    	am.getMapaElemento().existemElementosDireita(am.getAgente().getPosicao()) != 1 &&
		    	am.getMapaElemento().existemElementosEsquerda(am.getAgente().getPosicao()) != 1)||
		    	(((am.getMapaElemento().existemElementosCima(am.getAgente().getPosicao()) == 1)||
		    	(am.getMapaElemento().existemElementosBaixo(am.getAgente().getPosicao()) == 1) ||
		    	(am.getMapaElemento().existemElementosDireita(am.getAgente().getPosicao()) == 1)||
		    	(am.getMapaElemento().existemElementosEsquerda(am.getAgente().getPosicao()) == 1)) && 
		    	am.getAgente().isPokemonsRecuperados());	
		    actions
		      am.getAgente().setDecisao(3);
		      System.out.println("Decisao batalhar");
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule recuperarPokemons {
		    declarations
		      AgenteMapa am;
		    conditions
		    	am.getAgente().getDecisao() != am.getAgente().RECUPERAR_POKEMONS;
		    	am.getMapaElemento().existeElementoPosAtual(am.getAgente().getPosicao()) == 1;
		    	!am.getAgente().isPokemonsRecuperados();
		    actions
		      am.getAgente().setDecisao(4);
		      am.getAgente().setCustoAcao(-100);
		      am.getAgente().setPokemonsRecuperados(true); 
		      System.out.println("recuperar pokemons");
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule comprarPokebolas {
		    declarations
		      AgenteMapa am;
		    conditions
		    	am.getAgente().getDecisao() != am.getAgente().COMPRAR;
		    	am.getMapaElemento().existeElementoPosAtual(am.getAgente().getPosicao()) == 2;
		    	am.getAgente().getQuantidadePokebolas() == 0;
		    actions
		      am.getAgente().setDecisao(5);
		      am.getAgente().addPokebolas(25);
		      System.out.println("comprar pokebolas");
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule BatalhaPerder {
		    declarations
		      AgenteMapa am;
		    conditions
		      am.getAgente().isPokemonsRecuperados() == false;
		    actions
		      System.out.println("Voc� perdeu a batalham.");
		      am.getAgente().setCustoAcao(-1000);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule BatalhaGanhar {
		    declarations
		      AgenteMapa am;
		    conditions
		      am.getAgente().isPokemonsRecuperados() == true;
		    actions
		      System.out.println("Voc� ganhou a batalha");
		      am.getAgente().setCustoAcao(+150);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule AndarCima {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getOrientacao() == 1;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() - 1].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() - 1].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para cima");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX(), posicaoAtual.getY() - 1);
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule AndarBaixo {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getOrientacao() == 2;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() + 1].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX()][am.getAgente().getPosicao().getY() + 1].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para baixo");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX(), posicaoAtual.getY() + 1);
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule AndarDireita {
		   declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getOrientacao() == 3;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX() + 1][am.getAgente().getPosicao().getY()].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX() + 1][am.getAgente().getPosicao().getY()].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para direita");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX() + 1, posicaoAtual.getY());
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
		  
		  rule AndarEsquerda {
		    declarations
		      AgenteMapa am;
		      Vector posicaoAtual;
		    conditions
		    	am.getAgente().getOrientacao() == 4;
		    	( (am.getMapa()[am.getAgente().getPosicao().getX() - 1][am.getAgente().getPosicao().getY()].getTerreno() == 1 && 
				  am.getAgente().temPokemonAgua()) ||
		    	  (am.getMapa()[am.getAgente().getPosicao().getX() - 1][am.getAgente().getPosicao().getY()].getTerreno() == 5 && 
				  am.getAgente().temPokemonFogo())
				);
		    actions
		      System.out.println("O agente andou para esquerda");
		      posicaoAtual = am.getAgente().getPosicao();
		      Vector v = new Vector(posicaoAtual.getX() - 1, posicaoAtual.getY());
		      am.getAgente().setPosicao(v);
		      am.getAgente().setCustoAcao(-1);
		      am.getAgente().setDecisao(am.getAgente().ANDAR_ALEATORIAMENTE);
		      am.getMapaElemento.atualizaMapa();
		      modified(am);
		  }
  }
